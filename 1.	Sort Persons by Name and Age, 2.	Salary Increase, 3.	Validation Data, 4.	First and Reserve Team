

Sort By Name And Age








package humanResources;

import java.util.ArrayList;
import java.util.Collections;
import java.util.List;

public class Team {

	private String name;
	private List<Person> firstTeam;
	private List<Person> reserveTeam;
	
	public Team(String name) {
		this.name = name;
		this.firstTeam = new ArrayList<>();
		this.reserveTeam = new ArrayList<>();
	}

	public String getName() {
		return this.name;
	}

	public List<Person> getFirstTeam() {
		return Collections.unmodifiableList(firstTeam);
	}

	public List<Person> getReserveTeam() {
		return Collections.unmodifiableList(reserveTeam);
	}
	
	public void addPlayer(Person person) {
		if (person.getAge() < 40) {
			this.firstTeam.add(person);
		} else {
			this.reserveTeam.add(person);
		}
	}
	
}



---------------------------------------------------------------------------------


package humanResources;

public class Person {
	
	private String firstName;
	private String lastName;
	private Integer age;
	private Double salary;
	
	public Person(String firstName, String lastName, Integer age, Double salary) {
		setFirstName(firstName);
		setLastName(lastName);
		setAge(age);
		setSalary(salary);
	}

	public String getFirstName() {
		return firstName;
	}

	private void setFirstName(String firstName) {
		if (firstName.length() < 3) {
			throw new IllegalArgumentException("First name cannot be less than 3 symbols");
		}
		this.firstName = firstName;
	}

	public String getLastName() {
		return lastName;
	}

	private void setLastName(String lastName) {
		if (lastName.length() < 3) {
			throw new IllegalArgumentException("Last name cannot be less than 3 symbols");
		}
	    this.lastName = lastName;
	}

	public Integer getAge() {
		return age;
	}

	private void setAge(Integer age) {
		if (age < 1) {
			throw new IllegalArgumentException("Age cannot be zero or negative integer");
		}
		this.age = age;
	}

	public Double getSalary() {
		return salary;
	}

	private void setSalary(Double salary) {
		if (salary < 460) {
			throw new IllegalArgumentException("Salary cannot be less than 460 leva");
		}
		this.salary = salary;
	}

	@Override
	public String toString() {
		return this.firstName + " " + this.lastName + " " + this.age +" get "+ this.salary;
	}

	public void increaseSalary(Double bonus) {
		if(this.age > 30) {
			this.salary += this.salary * bonus / 100;
		} else {
			this.salary += this.salary * bonus / 200;
		}
	}
	

}

-------------------------------------------------------------------------------------------------


package humanResources;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;

public class HumanResources {
	
	
	public static void main(String[] args) throws IOException {
		
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		int n = Integer.parseInt(br.readLine());
		
		List<Person> persons = new ArrayList<>();
		
		for(int i = 0; i < n; i++) {
			String[] line = br.readLine().split(" ");
			
			try {
			Person person = new Person(line[0], line[1],
					Integer.parseInt( line[2]), Double.parseDouble(line[3]));
			persons.add(person);
			} catch (IllegalArgumentException ex) {
				System.out.println(ex.getMessage());
			}
			
		}
		
		Collections.sort(persons, (firstPerson, secondPerson) -> {
			int sComp = firstPerson.getFirstName().compareTo(secondPerson.getFirstName());
			if (sComp != 0) {
				return sComp;
			} else {
				int sCompLastName = firstPerson.getLastName().compareTo(secondPerson.getLastName());
				if (sCompLastName != 0) {
					return sCompLastName;
				} else {
					return firstPerson.getAge().compareTo(secondPerson.getAge());
				}
			}
		});
		
		if (!persons.isEmpty() && persons.size() != n) {
			System.out.println("--------------------");
		}
		
		Double bonus = Double.parseDouble(br.readLine());
		
		for(Person person : persons) {
			person.increaseSalary(bonus);
			System.out.println(person.toString());
		}
		
		Team team = new Team("Minior");
		for (Person person : persons) {
			team.addPlayer(person);
		}
		System.out.println("\n" + "First team have " +  team.getFirstTeam().size() + " players");
		System.out.println("Reserve team have " + team.getReserveTeam().size() + " players");
	}
}

